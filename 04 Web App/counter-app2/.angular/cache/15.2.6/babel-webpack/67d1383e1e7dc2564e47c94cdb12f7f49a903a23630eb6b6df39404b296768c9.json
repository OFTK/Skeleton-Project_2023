{"ast":null,"code":"import * as signalR from \"@aspnet/signalr\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AppComponent {\n  constructor(http) {\n    this.http = http;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Methods\": \"POST, GET\",\n        \"Access-Control-Allow-Headers\": \"Content-Type\"\n      })\n    };\n    this.negotiateUrl = \"https://skeletonfunctionapp.azurewebsites.net/api/negotiate\";\n    this.getCounterUrl = \"https://skeletonfunctionapp.azurewebsites.net/api/getcounter\";\n    this.updateCounterUrl = \"https://skeletonfunctionapp.azurewebsites.net/api/updatecounter\";\n    // private readonly negotiateUrl = \"http://localhost:7071/api/negotiate\";\n    // private readonly getCounterUrl = \"http://localhost:7071/api/getcounter\";\n    // private readonly updateCounterUrl = \"http://localhost:7071/api/updatecounter\";\n    this.counterId = 1;\n    this.counter = 0;\n    const negotiateBody = {\n      UserId: \"SomeUser\"\n    };\n    this.http.post(this.negotiateUrl, JSON.stringify(negotiateBody), this.httpOptions).pipe(map(connectionDetails => new signalR.HubConnectionBuilder().withUrl(`${connectionDetails.url}`, {\n      accessTokenFactory: () => connectionDetails.accessToken\n    }).build())).subscribe(hub => {\n      this.hubConnection = hub;\n      hub.on(\"CounterUpdate\", data => {\n        console.log(data);\n        this.counter = data.Count;\n      });\n      hub.start();\n    });\n    this.http.get(this.getCounterUrl).subscribe(cloudCounter => {\n      console.log(cloudCounter);\n      this.counter = +cloudCounter.count;\n    });\n  }\n  increaseCounter() {\n    const body = {\n      Id: this.counterId,\n      counter: this.counter += 1\n    };\n    this.http.post(this.updateCounterUrl, body, this.httpOptions).toPromise().catch(e => console.log(e));\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 12,\n  vars: 1,\n  consts: [[2, \"text-align\", \"center\"], [3, \"click\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n      i0.ɵɵtext(2, \"Counter Manager App\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"h2\");\n      i0.ɵɵtext(4, \"Current Counter\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"h3\");\n      i0.ɵɵtext(6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"br\");\n      i0.ɵɵelementStart(8, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_8_listener() {\n        return ctx.increaseCounter();\n      });\n      i0.ɵɵtext(9, \"+\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_10_listener() {\n        return ctx.increaseCounter();\n      });\n      i0.ɵɵtext(11, \"+\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵtextInterpolate(ctx.counter);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,OAAO,KAAKA,OAAO,MAAM,iBAAiB;AAC1C,SAAqBC,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,GAAG,QAAmB,gBAAgB;;;AAiB/C,OAAM,MAAOC,YAAY;EAmBvBC,YAA6BC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAlBhB,gBAAW,GAAG;MAAEC,OAAO,EAAE,IAAIL,WAAW,CAAC;QACvD,cAAc,EAAE,kBAAkB;QAClC,6BAA6B,EAAE,GAAG;QAClC,8BAA8B,EAAE,WAAW;QAC3C,8BAA8B,EAAE;OAChC;IAAC,CAAE;IACW,iBAAY,GAAG,6DAA6D;IAC5E,kBAAa,GAAG,8DAA8D;IAC9E,qBAAgB,GAAG,iEAAiE;IACrG;IACA;IACA;IAEiB,cAAS,GAAG,CAAC;IAGtB,YAAO,GAAW,CAAC;IAGzB,MAAMM,aAAa,GAAG;MAAEC,MAAM,EAAE;IAAU,CAAE;IAE5C,IAAI,CAACH,IAAI,CACNI,IAAI,CAAoB,IAAI,CAACC,YAAY,EAAEC,IAAI,CAACC,SAAS,CAACL,aAAa,CAAC,EAAE,IAAI,CAACM,WAAW,CAAC,CAC3FC,IAAI,CACHZ,GAAG,CAACa,iBAAiB,IACnB,IAAIf,OAAO,CAACgB,oBAAoB,EAAE,CAACC,OAAO,CAAC,GAAGF,iBAAiB,CAACG,GAAG,EAAE,EAAE;MAAEC,kBAAkB,EAAE,MAAMJ,iBAAiB,CAACK;IAAW,CAAE,CAAC,CAACC,KAAK,EAAE,CAC5I,CACF,CACAC,SAAS,CAACC,GAAG,IAAG;MACf,IAAI,CAACC,aAAa,GAAGD,GAAG;MACxBA,GAAG,CAACE,EAAE,CAAC,eAAe,EAAEC,IAAI,IAAG;QAC7BC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;QACjB,IAAI,CAACG,OAAO,GAAGH,IAAI,CAACI,KAAK;MAC3B,CAAC,CAAC;MACFP,GAAG,CAACQ,KAAK,EAAE;IACb,CAAC,CAAC;IAEJ,IAAI,CAAC1B,IAAI,CAAC2B,GAAG,CAAU,IAAI,CAACC,aAAa,CAAC,CAACX,SAAS,CAACY,YAAY,IAAG;MAClEP,OAAO,CAACC,GAAG,CAACM,YAAY,CAAC;MACzB,IAAI,CAACL,OAAO,GAAG,CAACK,YAAY,CAACC,KAAK;IACpC,CAAC,CAAC;EACJ;EAEOC,eAAe;IACpB,MAAMC,IAAI,GAAG;MAAEC,EAAE,EAAE,IAAI,CAACC,SAAS;MAAEV,OAAO,EAAE,IAAI,CAACA,OAAO,IAAG;IAAC,CAAE;IAE9D,IAAI,CAACxB,IAAI,CACNI,IAAI,CAAC,IAAI,CAAC+B,gBAAgB,EAAEH,IAAI,EAAE,IAAI,CAACxB,WAAW,CAAC,CACnD4B,SAAS,EAAE,CACXC,KAAK,CAACC,CAAC,IAAIhB,OAAO,CAACC,GAAG,CAACe,CAAC,CAAC,CAAC;EAC/B;;AAnDWxC,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAAyC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCnBzBC,8BAA+B;MACzBA,mCAAmB;MAAAA,iBAAK;MAC5BA,0BAAI;MAAAA,+BAAe;MAAAA,iBAAK;MACxBA,0BAAI;MAAAA,YAAa;MAAAA,iBAAK;MACtBA,qBAAM;MACNA,iCAAoC;MAA5BA;QAAA,OAASC,qBAAiB;MAAA,EAAC;MAACD,iBAAC;MAAAA,iBAAS;MAC9CA,kCAAoC;MAA5BA;QAAA,OAASC,qBAAiB;MAAA,EAAC;MAACD,kBAAC;MAAAA,iBAAS;;;MAH1CA,eAAa;MAAbA,iCAAa","names":["signalR","HttpHeaders","map","AppComponent","constructor","http","headers","negotiateBody","UserId","post","negotiateUrl","JSON","stringify","httpOptions","pipe","connectionDetails","HubConnectionBuilder","withUrl","url","accessTokenFactory","accessToken","build","subscribe","hub","hubConnection","on","data","console","log","counter","Count","start","get","getCounterUrl","cloudCounter","count","increaseCounter","body","Id","counterId","updateCounterUrl","toPromise","catch","e","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\USER\\OneDrive - mail.tau.ac.il\\שנה ג'\\IOT workshop\\Skeleton-Project_2023\\04 Web App\\counter-app\\src\\app\\app.component.ts","C:\\Users\\USER\\OneDrive - mail.tau.ac.il\\שנה ג'\\IOT workshop\\Skeleton-Project_2023\\04 Web App\\counter-app\\src\\app\\app.component.html"],"sourcesContent":["import { Component } from \"@angular/core\";\r\nimport * as signalR from \"@aspnet/signalr\";\r\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { map, switchMap } from \"rxjs/operators\";\r\n\r\ninterface SignalRConnection {\r\n  url: string;\r\n  accessToken: string;\r\n}\r\n\r\ninterface Counter {\r\n  id: number;\r\n  count: number;\r\n}\r\n\r\n@Component({\r\n  selector: \"app-root\",\r\n  templateUrl: \"./app.component.html\",\r\n  styleUrls: [\"./app.component.less\"]\r\n})\r\nexport class AppComponent {\r\n  private readonly httpOptions = { headers: new HttpHeaders({\r\n     \"Content-Type\": \"application/json\" ,\r\n     \"Access-Control-Allow-Origin\": \"*\",\r\n     \"Access-Control-Allow-Methods\": \"POST, GET\",\r\n     \"Access-Control-Allow-Headers\": \"Content-Type\"\r\n    }) };\r\n  private readonly negotiateUrl = \"https://skeletonfunctionapp.azurewebsites.net/api/negotiate\";\r\n  private readonly getCounterUrl = \"https://skeletonfunctionapp.azurewebsites.net/api/getcounter\";\r\n  private readonly updateCounterUrl = \"https://skeletonfunctionapp.azurewebsites.net/api/updatecounter\";\r\n  // private readonly negotiateUrl = \"http://localhost:7071/api/negotiate\";\r\n  // private readonly getCounterUrl = \"http://localhost:7071/api/getcounter\";\r\n  // private readonly updateCounterUrl = \"http://localhost:7071/api/updatecounter\";\r\n\r\n  private readonly counterId = 1;\r\n\r\n  private hubConnection: signalR.HubConnection;\r\n  private counter: number = 0;\r\n\r\n  constructor(private readonly http: HttpClient) {\r\n    const negotiateBody = { UserId: \"SomeUser\" };\r\n\r\n    this.http\r\n      .post<SignalRConnection>(this.negotiateUrl, JSON.stringify(negotiateBody), this.httpOptions)\r\n      .pipe(\r\n        map(connectionDetails =>\r\n          new signalR.HubConnectionBuilder().withUrl(`${connectionDetails.url}`, { accessTokenFactory: () => connectionDetails.accessToken }).build()\r\n        )\r\n      )\r\n      .subscribe(hub => {\r\n        this.hubConnection = hub;\r\n        hub.on(\"CounterUpdate\", data => {\r\n          console.log(data);\r\n          this.counter = data.Count;\r\n        });\r\n        hub.start();\r\n      });\r\n\r\n    this.http.get<Counter>(this.getCounterUrl).subscribe(cloudCounter => {\r\n      console.log(cloudCounter);\r\n      this.counter = +cloudCounter.count;\r\n    });\r\n  }\r\n\r\n  public increaseCounter(): void {\r\n    const body = { Id: this.counterId, counter: this.counter +=1 };\r\n\r\n    this.http\r\n      .post(this.updateCounterUrl, body, this.httpOptions)\r\n      .toPromise()\r\n      .catch(e => console.log(e));\r\n  }\r\n}\r\n","<!--The content below is only a placeholder and can be replaced.-->\r\n<div style=\"text-align:center\">\r\n  <h1>Counter Manager App</h1>\r\n  <h2>Current Counter</h2>\r\n  <h3>{{ counter }}</h3>\r\n  <br />\r\n  <button (click)=\"increaseCounter()\">+</button>\r\n  <button (click)=\"increaseCounter()\">+</button>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}